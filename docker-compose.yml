version: '3.3'

services:
  my_db-node-01:
    build:
      context: ./
      dockerfile: docker/Dockerfile
    container_name: my_db-node-01
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: serv_store
      MYSQL_USER: myyuser
      MYSQL_PASSWORD: 123
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    networks:
      - arch_network
    ports:
      - 3360:3306
    healthcheck:
      test: "/usr/bin/mysql --user=myyuser --password=123 --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    volumes:
      - my_db-node-01-data:/var/lib/mysql

  my_db-node-02:
    build:
      context: ./
      dockerfile: docker/Dockerfile
    container_name: my_db-node-02
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: serv_store
      MYSQL_USER: myyuser
      MYSQL_PASSWORD: 123
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    networks:
      - arch_network
    ports:
      - 3361:3306
    volumes:
      - my_db-node-02-data:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=myyuser --password=123 --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5

  proxysql:
    build:
      context: ./
      dockerfile: docker/proxysql/Dockerfile
    container_name: proxysql
    command: >
      --initial
    volumes:
      - proxysql-data:/var/lib/proxysql
    healthcheck:
      test: "/usr/bin/mysql --user=myyuser --password=123 --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    depends_on:
      - my_db-node-01
      - my_db-node-02
    networks:
      - arch_network
    ports:
      # Mysql Client Port
      - "6033:6033"
      # Mysql Admin Port
      - "6032:6032"
  
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    networks:
      - arch_network
    volumes:
      - cache:/data

  kafka1:
    image: 'bitnami/kafka:latest'
    container_name: kafka1
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "N2Y2OTlhMTczZDNkNDIwM2"
    volumes:
      - kafka_volume1:/bitnami/kafka
    networks:
      - arch_network

  kafka2:
    image: 'bitnami/kafka:latest'
    container_name: kafka2
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "N2Y2OTlhMTczZDNkNDIwM3"
    volumes:
      - kafka_volume2:/bitnami/kafka
    networks:
      - arch_network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.4.0
    ports:
      - "8888:8082"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092"
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "localhost:9092"
      KAFKA_CLUSTERS_0_NAME: "social_network"
    networks:
      - arch_network



  user_service:
    build:
      context: ./
      dockerfile: user/Dockerfile
    container_name: user_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=myyuser
      - DB_PASSWORD=123
      - DB_DATABASE=serv_store
      - CACHE=cache:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=service
      - QUEUE_GROUP_ID=0
    ports:
      - 8082:8082
    networks:
      - arch_network
    depends_on:
    -  my_db-node-01
    -  my_db-node-02
    -  proxysql
    -  cache
    
  serving_service:
    build:
      context: ./
      dockerfile: service/Dockerfile
    container_name: serving_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=myyuser
      - DB_PASSWORD=123
      - DB_DATABASE=serv_store
      - CACHE=cache:6379
    ports:
      - 8083:8083
    networks:
      - arch_network
    depends_on:
    - my_db-node-01
    - my_db-node-02
    - proxysql
    - cache
  
  order_service:
    build:
      context: ./
      dockerfile: order/Dockerfile
    container_name: order_service
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=myyuser
      - DB_PASSWORD=123
      - DB_DATABASE=serv_store
      - CACHE=cache:6379
    ports:
      - 8084:8084
    networks:
      - arch_network
    depends_on:
    -  my_db-node-01
    -  my_db-node-02
    -  proxysql
    -  cache


  writer:
    build:
      context: ./
      dockerfile: docker/Dockerfile
    container_name: writer
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=myyuser
      - DB_PASSWORD=123
      - DB_DATABASE=serv_store
      - CACHE=cache:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=service
      - QUEUE_GROUP_ID=0
    networks:
      - arch_network


volumes:
  my_db-node-01-data:
  my_db-node-02-data:
  proxysql-data:
  cache:
  kafka_volume1:
  kafka_volume2:

networks:
  arch_network:
    driver: "bridge"
    external: false